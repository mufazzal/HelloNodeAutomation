pipeline {
    agent { label 'slave-ec2-fleet' }

    parameters {
        string(name: 'image', defaultValue: 'helloNode:latest', description: 'Please provide image for deployment')
    }        
    environment {
        awsCredId = "Mufazzal"
        gcServiceAccountFile = "gcServiceAccountFile-gke-hn"
        gkeProjectName = "hellonode-gke-343709"
        gkeClusterName = "hellonode-gke-343709-gke"
        gkeZone = "us-central1-b"
        CLOUDSDK_CORE_DISABLE_PROMPTS=1

        dockerRepo = "388412347424.dkr.ecr.us-east-1.amazonaws.com/hello-node-repo-ecr"
        ecrUrl = "388412347424.dkr.ecr.us-east-1.amazonaws.com"
        aws_region = "us-east-1"

        nameSpace = "hello-node"
        ecrSeretName = "ecrSeret"

    }
    stages {    

        stage('ECR Auth') {
            steps {
                 sh """

                 """
            }      
        }
        stage('Deployment') {
           
            steps {
                echo 'Creating Deployment in K8S'    
                
                ecrToken = sh(returnStdout: true, script: 'aws ecr get-login-password').trim()
                echo "$ecrToken"

                withCredentials([file(credentialsId: "$gcServiceAccountFile", variable: 'GC_KEY')]) {
                    sh """
                        source /home/ec2-user/google-cloud-sdk/path.bash.inc
                        source /home/ec2-user/google-cloud-sdk/completion.bash.inc
                        gcloud -v
                        echo "Authentication GCloud"
                        gcloud auth activate-service-account --key-file=$GC_KEY
                        gcloud config set project $gkeProjectName
                        gcloud config set compute/zone $gkeZone
                        gcloud container clusters get-credentials $gkeClusterName --zone $gkeZone
                        echo "Authentication GCloud Successful"
                        kubectl version


                        kubectl create namespace $nameSpace


                        kubectl create secret docker-registry $ecrSeretName \
                            --docker-server=388412347424.dkr.ecr.$aws_region/.amazonaws.com \
                            --docker-username=AWS \
                            --docker-password=$ecrToken \
                            --namespace=$nameSpace

                        kubectl apply -f Deployment/dev/k8s/k8sObjects

                    """
                }

                echo 'Creating Deployment in K8S'
            }
        } 
        
    } 
}
