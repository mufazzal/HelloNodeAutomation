pipeline {
    agent { label 'slave-ec2-fleet' }

    parameters {
        string(name: 'image', defaultValue: 'helloNode:latest', description: 'Please provide image for deployment')
    }        
    environment {
        awsCredId = "Mufazzal"
        //gcServiceAccountFile = "gcServiceAccountFile-gke-hn"
        gcServiceAccountFile = "gcServiceAccountFile-gke-def-hn"
        gkeProjectName = "hellonode-gke-343709"
        gkeClusterName = "hellonode-gke-343709-gke"
        gkeZone = "us-central1-b"
        CLOUDSDK_CORE_DISABLE_PROMPTS=1

        dockerRepo = "388412347424.dkr.ecr.us-east-1.amazonaws.com/hello-node-repo-ecr"
        ecrUrl = "388412347424.dkr.ecr.us-east-1.amazonaws.com"
        aws_region = "us-east-1"

        nameSpace = "hello-node"
        nameSpace_helm = "hello-node-helm"
        ecrSeretName = "ecr-secret-$BUILD_ID"

    }
    stages {    

        stage('ECR Auth') {
            steps {
                 sh """

                 """
            }      
        }
        stage('Deployment') {
           
            steps {
                echo 'Creating Deployment in K8S'    
                
                script {
                    //env.ecrToken = sh(returnStdout: true, script: 'aws ecr get-login-password').trim()
                    // HARD CODING
                    env.ecrToken = sh(returnStdout: true, script: 'aws ecr get-login-password --region us-east-1').trim()
                      
                    echo "${env.ecrToken}"
                }                

                withCredentials([file(credentialsId: "$gcServiceAccountFile", variable: 'GC_KEY')]) {
                    sh """
                        source /home/ec2-user/google-cloud-sdk/path.bash.inc
                        source /home/ec2-user/google-cloud-sdk/completion.bash.inc
                        gcloud -v
                        echo "Authentication GCloud"
                        gcloud auth activate-service-account --key-file=$GC_KEY
                        gcloud config set project $gkeProjectName
                        gcloud config set compute/zone $gkeZone
                        gcloud container clusters get-credentials $gkeClusterName --zone $gkeZone
                        echo "Authentication GCloud Successful"
                        kubectl version
                        
                        helm init
                        helm repo add stable https://charts.helm.sh/stable
                        helm install muf-nginx stable/nginx-ingress --set rbac.create=true

                        kubectl create namespace $nameSpace --dry-run=client -o yaml | kubectl apply -f -
                        
                        kubectl create namespace $nameSpace_helm --dry-run=client -o yaml | kubectl apply -f -

                        kubectl apply -f Deployment/dev/k8s/k8sObjects

                    """
                }

                echo 'Creating Deployment in K8S'
            }
        } 
        
    } 
}

// kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "$ecrSeretName"}]}'

// kubectl create secret docker-registry $ecrSeretName \
//     --docker-server=388412347424.dkr.ecr.$aws_region/.amazonaws.com \
//     --docker-username=AWS \
//     --docker-password=${env.ecrToken} \
//     --docker-email="sd@ss.com" \
//     --namespace=$nameSpace \
//     --dry-run=client \
//     -o yaml \
//     | kubectl apply -f -

// sed -i s/__ECR_SECRET_PLACEHOLDER__/$ecrSeretName/g Deployment/dev/k8s/k8sObjects/deployment.yml
// cat Deployment/dev/k8s/k8sObjects/deployment.yml